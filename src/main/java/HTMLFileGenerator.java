import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;

import org.w3c.dom.Document;
import org.xml.sax.SAXException;

public class HTMLFileGenerator implements FileHandler {

    final private Path _homepagePath;
    final private Path _tmpPath;

    public HTMLFileGenerator(final Path homepagePath, final Path tmpPath) {
        _homepagePath = homepagePath;
        _tmpPath = tmpPath;   
    }
    
    @Override
    public Status handleCreation(final Path file) {

        final File outputFile = getHtmlFile(file).toFile();
        final Path reportFile = getReportFile(file);
        System.out.println("report file =" + reportFile);
        
        //factory.setNamespaceAware(true);
        //factory.setValidating(true);
        try {
            final File stylesheet = Paths.get(_homepagePath.toString(), "css", "strict.xsl").toFile();
            final File datafile = file.toFile();

            final DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            final DocumentBuilder builder = factory.newDocumentBuilder();
            final Document document = builder.parse(datafile);

            // Use a Transformer for output
            final TransformerFactory tFactory = TransformerFactory.newInstance();
            final StreamSource stylesource = new StreamSource(stylesheet);
            final Transformer transformer = tFactory.newTransformer(stylesource);

            final DOMSource source = new DOMSource(document);
            final StreamResult result = new StreamResult(outputFile);
            transformer.transform(source, result);
        } catch (TransformerConfigurationException tce) {
            // Error generated by the parser
            System.out.println("\n** Transformer Factory error");
            System.out.println("   " + tce.getMessage());

            // Use the contained exception, if any
            Throwable x = tce;

            if (tce.getException() != null) {
                x = tce.getException();
            }

            x.printStackTrace();
        } catch (TransformerException te) {
            // Error generated by the parser
            System.out.println("\n** Transformation error");
            System.out.println("   " + te.getMessage());

            // Use the contained exception, if any
            Throwable x = te;

            if (te.getException() != null) {
                x = te.getException();
            }

            x.printStackTrace();
        } catch (SAXException sxe) {
            // Error generated by this application
            // (or a parser-initialization error)
            Exception x = sxe;

            if (sxe.getException() != null) {
                x = sxe.getException();
            }

            x.printStackTrace();
        } catch (ParserConfigurationException pce) {
            // Parser with specified options can't be built
            pce.printStackTrace();
        } catch (IOException ioe) {
            // I/O error
            ioe.printStackTrace();
        }
    
        return Status.HANDLED_WITH_SUCCESS;
    }

    @Override
    public Status handleDeletion(final Path file) {

        try {
            Files.delete(getHtmlFile(file));
            
        } catch (final IOException e) {
            ExitHelper.exit(e);
        }
        
        return Status.HANDLED_WITH_SUCCESS;
    }
    
    private Path getHtmlFile(final Path file) {
        final String s = file.toString();
        return Paths.get(s.substring(0, s.length() - 4).concat(".html"));
    }
    
    private Path getReportFile(final Path file) {
         final Path relativePath = _homepagePath.relativize(file);
         final Path reportFilePath = _tmpPath.resolve(relativePath);
         final String s = reportFilePath.toString();
         return Paths.get(s.substring(0, s.length() - 4).concat("_report_html.txt"));         
    }
}
