import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;

import org.w3c.dom.Document;

public class HTMLFileGenerator implements FileHandler {

    final private Path _homepagePath;
    final private Path _tmpPath;
    final private DocumentBuilder _builder;
    final private Transformer _transformer;
    
    public HTMLFileGenerator(final Path homepagePath, final Path tmpPath) {
        _homepagePath = homepagePath;
        _tmpPath = tmpPath;
        _builder = newDocumentBuilder();
        _transformer = newTransformer(_homepagePath);
    }
    
    @Override
    public Status handleCreation(final Path file) {

        final File outputFile = getHtmlFile(file).toFile();
        final Path reportFile = getReportFile(file);
        createAndTruncateFile(reportFile);

        //factory.setNamespaceAware(true);
        //factory.setValidating(true);
        try (final InputStream is = new FileInputStream(file.toFile());) {
            final Document document = _builder.parse(is);
            final DOMSource source = new DOMSource(document);
            final StreamResult result = new StreamResult(outputFile);
            _transformer.transform(source, result);
/*        } catch (TransformerConfigurationException e) {
            // Error generated by the parser
            System.out.println("\n** Transformer Factory error");
            System.out.println("   " + tce.getMessage());

            // Use the contained exception, if any
            Throwable x = tce;

            if (tce.getException() != null) {
                x = tce.getException();
            }

            x.printStackTrace();
        } catch (TransformerException te) {
            // Error generated by the parser
            System.out.println("\n** Transformation error");
            System.out.println("   " + te.getMessage());

            // Use the contained exception, if any
            Throwable x = te;

            if (te.getException() != null) {
                x = te.getException();
            }

            x.printStackTrace();
        } catch (SAXException sxe) {
            // Error generated by this application
            // (or a parser-initialization error)
            Exception x = sxe;

            if (sxe.getException() != null) {
                x = sxe.getException();
            }

            x.printStackTrace();
        }*/
        } catch (final Exception e) {
            try (PrintStream reportWriter = new PrintStream(reportFile.toFile())) {
                e.printStackTrace(reportWriter);
            } catch (IOException e2) {
                ExitHelper.exit(e2);
            }
            return Status.FAILED_TO_HANDLED;                
            }
            
        return Status.HANDLED_WITH_SUCCESS;
    }

    @Override
    public Status handleDeletion(final Path file) {

        deleteFile(getHtmlFile(file));
        deleteFile(getReportFile(file));
        
        return Status.HANDLED_WITH_SUCCESS;
    }

    private static DocumentBuilder newDocumentBuilder() {
        final DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        try {
            return factory.newDocumentBuilder();
        } catch (final ParserConfigurationException e) {
            ExitHelper.exit(e);
            return null;
        }
    }
    
    private static Transformer newTransformer(final Path homepagePath) {
        final File stylesheet = Paths.get(homepagePath.toString(), "css", "strict.xsl").toFile();
        final TransformerFactory tFactory = TransformerFactory.newInstance();
        final StreamSource stylesource = new StreamSource(stylesheet);
        try {
            return tFactory.newTransformer(stylesource);
        } catch (final TransformerConfigurationException e) {
            ExitHelper.exit(e);
            return null;
        }
    }

    private Path getHtmlFile(final Path file) {
        final String s = file.toString();
        return Paths.get(s.substring(0, s.length() - 4).concat(".html"));
    }
    
    private Path getReportFile(final Path file) {
         final Path relativePath = _homepagePath.relativize(file);
         final Path reportFilePath = _tmpPath.resolve(relativePath);
         final String s = reportFilePath.toString();
         return Paths.get(s.substring(0, s.length() - 4).concat("_report_html.txt"));         
    }
    
    private void createAndTruncateFile(final Path file) {
        file.getParent().toFile().mkdirs();
        try (FileWriter writer = new FileWriter(file.toFile(), false)) {
            writer.flush();
        } catch (final IOException e) {
            ExitHelper.exit(e);
        }

        System.out.println("created file " + file);
    }
    
    private void deleteFile(final Path file) {
        if (file.toFile().exists()) {        
            try {
                Files.delete(file);
            } catch (final IOException e) {
                ExitHelper.exit(e);
            }
        }
        
        System.out.println("deleted file " + file);
    }
 
}
